
### Method:1 ###
from pathlib import Path
import bisect
import re

size = [1, 2**10, 2**20, 2**30] ## GiB
unit = ['B', 'K', 'M', 'G']

def con(byts):
    if byts != 0:
        index = bisect.bisect(size, byts) -1
        return "{:.1f}{}".format(byts/size[index], unit[index])
    else: 
        return '0B'
    
print('{} {:^30} {}'.format('Netwok-card','Download','Upload'))   
p = Path('/proc/net/dev').read_text().splitlines()
net = {i.split()[0]: [i.split()[1], i.split()[9]] for i in p
       if re.search(r'eth|wlan|enx|ens',i)}

def data(**net):
    for j in net:
        down,up = net[j]
        print('{:<15} {:>12} {:>19}'.format(j,con(int(down)), con(int(up))))

data(**n


### Method:2 ###
import bisect
import re

size = [1, 2**10, 2**20, 2**30] ## GiB
unit = ['B', 'K', 'M', 'G']

def con(byts):
    if byts != 0:
        index = bisect.bisect(size, byts) -1
        return "{:.1f}{}".format(byts/size[index], unit[index])
    else: 
        return '0B'

print('{} {:^30} {}'.format('Netwok-card','Download','Upload'))
with open('/proc/net/dev') as nop:
    for i in nop.readlines():
        if re.search(r'eth|wlan|enx|ens',i):
            j = i.split()[0:10]            
            print("{:<15} {:>12} {:>19}".
                  format(j[0],con(int(j[1])),con(int(j[-1]))))
